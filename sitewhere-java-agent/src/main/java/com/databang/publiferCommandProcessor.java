/*
 * Copyright (c) SiteWhere LLC. All rights reserved. http://www.sitewhere.com
 *
 * The software in this package is published under the terms of the MIT
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package com.databang;

import com.pi4j.io.i2c.I2CBus;
import com.pi4j.io.i2c.I2CDevice;
import com.pi4j.io.i2c.I2CFactory;
import com.pi4j.io.i2c.I2CFactory.UnsupportedBusNumberException;

import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.sitewhere.agent.BaseCommandProcessor;
import com.sitewhere.agent.ISiteWhereEventDispatcher;
import com.sitewhere.agent.SiteWhereAgentException;
import com.sitewhere.device.communication.protobuf.proto.Sitewhere.Device.Header;
import com.sitewhere.device.communication.protobuf.proto.Sitewhere.Device.RegistrationAck;
import com.sitewhere.spi.device.event.IDeviceEventOriginator;

/**
 * Example of command processing from a protobuf descriptor generated by SiteWhere.
 * 
 * @author Derek
 */
public class publiferCommandProcessor extends BaseCommandProcessor {

	/** Static logger instance */
	private static Logger LOGGER = Logger.getLogger(publiferCommandProcessor.class.getName());

	/** Executor for background processing */
	private ExecutorService executor = Executors.newSingleThreadExecutor();

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.sitewhere.agent.BaseCommandProcessor#executeStartupLogic(java.lang.String,
	 * java.lang.String, com.sitewhere.agent.ISiteWhereEventDispatcher)
	 */
	@Override
	public void executeStartupLogic(String hardwareId, String specificationToken,
			ISiteWhereEventDispatcher dispatcher) throws SiteWhereAgentException {
		sendRegistration(hardwareId, specificationToken);
		LOGGER.info("Sent registration information.");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.sitewhere.agent.BaseCommandProcessor#handleRegistrationAck(com.sitewhere.device
	 * .communication.protobuf.proto.Sitewhere.Device.Header,
	 * com.sitewhere.device.communication.protobuf.proto.Sitewhere.Device.RegistrationAck)
	 */
	@Override
	public void handleRegistrationAck(Header header, RegistrationAck ack) {
		switch (ack.getState()) {
		case NEW_REGISTRATION: {
			LOGGER.info("SiteWhere indicated device was successfully registered.");
			onRegistrationConfirmed(ack);
			break;
		}
		case ALREADY_REGISTERED: {
			LOGGER.info("SiteWhere indicated device is using an existing registration.");
			onRegistrationConfirmed(ack);
			break;
		}
		case REGISTRATION_ERROR: {
			LOGGER.warning("SiteWhere indicated a device registration error.");
			break;
		}
		}
	}

	/**
	 * Handle logic that should execute once registration is confirmed.
	 * 
	 * @param ack
	 */
	public void onRegistrationConfirmed(RegistrationAck ack) {
		sendDataAtInterval();
	}

	/**
	 * This is an example of creating a thread that will send data to SiteWhere every so
	 * often, sleeping between cycles.
	 */
	public void sendDataAtInterval() {

		// Run processing in another thread.
		LOGGER.info("Starting JVM memory statistics sender thread.");
		executor.execute(new Runnable() {

			@Override
			public void run() {
				while (true) {


					try {
						// Send events to SiteWhere.
						// Create I2C bus
						I2CBus Bus = I2CFactory.getInstance(I2CBus.BUS_1);
						// Get I2C device, TSL2561 I2C address is 0x39(57)
						I2CDevice device = Bus.getDevice(0x29);
				
						// Select control register
						// Power ON mode
						device.write(0x00 | 0x80, (byte)0x03);
						// Select timing register
						// Nominal integration time = 402ms
						device.write(0x01 | 0x80, (byte)0x02);
						Thread.sleep(500);

						// Read 4 bytes of data
						// ch0 lsb, ch0 msb, ch1 lsb, ch1 msb
						byte[] data=new byte[4];
						device.read(0x0C | 0x80, data, 0, 4);

						// Convert the data
						double ch0 = ((data[1] & 0xFF)* 256 + (data[0] & 0xFF));
						double ch1 = ((data[3] & 0xFF)* 256 + (data[2] & 0xFF));


						sendMeasurement(getHardwareId(), "fullspectrum", ch0, null);
						sendMeasurement(getHardwareId(), "infrared", ch1, null);
						sendMeasurement(getHardwareId(), "visible", (ch0 - ch1), null);
						LOGGER.info("Sent a Light Sensor measurements.");

						// Wait five second before sending next events.
						Thread.sleep(5000);
					} catch (SiteWhereAgentException e) {
						LOGGER.log(Level.WARNING, "Unable to send measurements to SiteWhere.", e);
					} catch (InterruptedException e) {
						LOGGER.log(Level.WARNING, "Event sender thread shut down.", e);
					} catch (IOException e){
							LOGGER.log(Level.WARNING, "IOException.", e);				
					} catch (UnsupportedBusNumberException e){
							LOGGER.log(Level.WARNING, "UnsupportedBusNumberException.", e);				
					}

					
				}
			}
		});
	}

	/**
	 * Handler for 'helloWorld(String, boolean)' command.
	 * 
	 * @param greeting
	 * @param loud
	 * @param originator
	 * @throws SiteWhereAgentException
	 */
	public void helloWorld(String greeting, Boolean loud, IDeviceEventOriginator originator)
			throws SiteWhereAgentException {
		String response = greeting + " World!";
		if (loud) {
			response = response.toUpperCase();
		}
		sendAck(getHardwareId(), response, originator);
		LOGGER.info("Sent reponse to 'helloWorld' command.");
	}

	/**
	 * Handler for 'ping()' command.
	 * 
	 * @param originator
	 * @throws SiteWhereAgentException
	 */
	public void ping(IDeviceEventOriginator originator) throws SiteWhereAgentException {
		sendAck(getHardwareId(), "Acknowledged.", originator);
		LOGGER.info("Sent reponse to 'ping' command.");
	}

	/**
	 * Handler for 'testEvents()' command.
	 * 
	 * @param originator
	 * @throws SiteWhereAgentException
	 */
	public void testEvents(IDeviceEventOriginator originator) throws SiteWhereAgentException {
		sendMeasurement(getHardwareId(), "engine.temp", 170.0, originator);
		sendLocation(getHardwareId(), 33.7550, -84.3900, 0.0, originator);
		sendAlert(getHardwareId(), "engine.overheat", "Engine is overheating!", originator);
		LOGGER.info("Sent reponse to 'testEvents' command.");
	}
}
